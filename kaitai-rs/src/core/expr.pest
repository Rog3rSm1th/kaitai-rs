/// Pest grammar for the kaitai expression language
/// https://doc.kaitai.io/user_guide.html#_expression_language

// Identifier
identifier = { 'a'..'z' ~ ('a'..'z' | '0'..'9' | "_")* }

// User-defined types
user_defined_type = { "_root" | "_parent" | "io" }

// Path element
path_element = { method_call| enum | identifier | user_defined_type }

// Index
index = { expression }

// Path
path = { path_element ~ ("." ~ path_element | "[" ~ index ~ "]")* }

// Operators
arithmetic_operator = { "+" | "-" | "/" | "*" | "%" }
bitwise_operator    = { "<<" | ">>" | "&" | "|" | "^" }
relational_operator = { "<" | "<=" | ">=" | ">" | "==" | "!=" }
logical_operator    = { "not" | "and" | "or" }
operator            = { (arithmetic_operator | bitwise_operator | relational_operator | logical_operator) }

// String
string = {
    ("\"" ~ inner_double_quoted ~ "\"")
  | ("'" ~ inner_single_quoted ~ "'")
}

inner_double_quoted = @{ (!("\\" | "\"" | "'") ~ ANY)* ~ (escape ~ inner_double_quoted)? }
inner_single_quoted = @{ (!("\\" | "\"" | "'") ~ ANY)* ~ (escape ~ inner_single_quoted)? }

escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

// Integers
visual_separator = _{ "_" }
hex_integer      = _{ "0" ~ ("x" | "X") ~ (ASCII_HEX_DIGIT ~ visual_separator?)+ }
bin_integer      = _{ "0" ~ ("b" | "B") ~ (ASCII_BIN_DIGIT ~ visual_separator?)+ }
octal_integer    = _{ "0" ~ ("o" | "O") ~ (ASCII_OCT_DIGIT ~ visual_separator?)+ }
integer          =  { hex_integer | bin_integer | octal_integer | (("-" | "+")? ~ DECIMAL_NUMBER+) }

// Float
exponent                = _{ ("e" | "E") ~ ("-" | "+")? ~ DECIMAL_NUMBER+ }
float                   = _{ "-"? ~ DECIMAL_NUMBER* ~ "." ~ DECIMAL_NUMBER+ }
exponent_notation_float =  { float ~ exponent }
floating_point_number   =  { exponent_notation_float | float }

// Boolean
boolean = { "true" | "false" }

// Enum
enum = { identifier ~ "::" ~ identifier }

// Array
string_array  = { "[" ~ (string ~ ",")* ~ string ~ "]" }
integer_array = { "[" ~ (integer ~ ",")* ~ integer ~ "]" }
boolean_array = { "[" ~ (boolean ~ ",")* ~ boolean ~ "]" }
float_array   = { "[" ~ (floating_point_number ~ ",")* ~ floating_point_number ~ "]" }
array         = { integer_array | boolean_array | float_array }

// Method
integer_method     = { "to_s" }
float_method       = { "to_i" }
bytes_array_method = { "length" | ("to_s" ~ "(" ~ string ~ ")") }
string_method      = { "length" | "reverse" | "to_i" | ("to_i" ~ "(" ~ DECIMAL_NUMBER ~ ")") | ("substring" ~ "(" ~ DECIMAL_NUMBER ~ "," ~ DECIMAL_NUMBER ~ ")") }
enum_method        = { "to_i" }
array_method       = { "first" | "last" | "size" | "min" | "max" }
method             = { integer_method | float_method | bytes_array_method | string_method | enum_method | array_method }

// Method calls
method_call = {
    (integer ~ "." ~ integer_method)
  | (float ~ "." ~ float_method)
  | ((integer_array | string_array | boolean_array)) ~ "." ~ bytes_array_method
  | (string ~ "." ~ string_method)
  | (enum ~ "." ~ enum_method)
  | (array ~ "." ~ array_method)
  | (identifier ~ "." ~ method)
}

// Method call expression
method_call_expression = { method_call | (full_expression ~ "." ~ method_call) }

// Literal
literal = { path | enum | string | floating_point_number | integer | boolean | array }

// Expression
expression = { literal ~ (operator ~ literal)* }

// Single expression
single_expression = _{ "(" ~ expression ~ ")" | expression }

// Full expression
full_expression = _{ single_expression ~ (operator ~ single_expression)* }

// Ternary operation
ternary_operator = { full_expression ~ "?" ~ full_expression ~ ":" ~ full_expression }

// Ternary operator expression
ternary_operator_expression = { "(" ~ ternary_operator ~ ")" | ternary_operator }

// Kaitai expression
kaitai_expression = { SOI ~ (ternary_operator_expression | single_expression) ~ (operator ~ (ternary_operator_expression | single_expression))* ~ EOI }

WHITESPACE = _{ " " | "\t" }
